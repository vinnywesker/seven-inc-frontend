[{"D:\\developer\\seven\\frontend\\src\\index.tsx":"1","D:\\developer\\seven\\frontend\\src\\components\\viewItems.tsx":"2","D:\\developer\\seven\\frontend\\src\\config\\types.ts":"3","D:\\developer\\seven\\frontend\\src\\components\\menuBar.tsx":"4","D:\\developer\\seven\\frontend\\src\\config\\envVars.ts":"5","D:\\developer\\seven\\frontend\\src\\components\\dialogAddItem.tsx":"6","D:\\developer\\seven\\frontend\\src\\components\\dialogUpdateItem.tsx":"7","D:\\developer\\seven\\frontend\\src\\services\\employeesItems.ts":"8","D:\\developer\\seven\\frontend\\src\\services\\itemsContext.tsx":"9","D:\\developer\\seven\\frontend\\src\\views\\main.tsx":"10","D:\\developer\\seven\\frontend\\src\\components\\alertBar.tsx":"11","D:\\developer\\seven\\frontend\\src\\components\\buttonDeleteItem.tsx":"12","D:\\developer\\seven\\frontend\\src\\services\\authContext.tsx":"13"},{"size":546,"mtime":1607960634002,"results":"14","hashOfConfig":"15"},{"size":3884,"mtime":1607960634001,"results":"16","hashOfConfig":"15"},{"size":1764,"mtime":1607961507943,"results":"17","hashOfConfig":"15"},{"size":1320,"mtime":1607960634001,"results":"18","hashOfConfig":"15"},{"size":122,"mtime":1607960634002,"results":"19","hashOfConfig":"15"},{"size":4850,"mtime":1607964069914,"results":"20","hashOfConfig":"15"},{"size":5459,"mtime":1607962885143,"results":"21","hashOfConfig":"15"},{"size":1258,"mtime":1607963760640,"results":"22","hashOfConfig":"15"},{"size":921,"mtime":1607960634003,"results":"23","hashOfConfig":"15"},{"size":400,"mtime":1607963710774,"results":"24","hashOfConfig":"15"},{"size":1144,"mtime":1607964168239,"results":"25","hashOfConfig":"15"},{"size":521,"mtime":1607963884516,"results":"26","hashOfConfig":"15"},{"size":1463,"mtime":1607960634003,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1aang9e",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\developer\\seven\\frontend\\src\\index.tsx",[],["56","57"],"D:\\developer\\seven\\frontend\\src\\components\\viewItems.tsx",["58"],"import React, { useState, useMemo } from 'react';\r\nimport { DataGrid, ColDef, ValueFormatterParams } from '@material-ui/data-grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport ButtonDelete from './buttonDeleteItem';\r\nimport ButtonsActions from './buttonAddItem'\r\nimport ButtonUpdateItem from './buttonUpdateItem';\r\nimport { alertTypes, propsDataGrid } from '../config/types';\r\nimport { deleteItem } from '../services/employeesItems'\r\nimport DialogAddItem from './dialogAddItem';\r\nimport DialogUpdateItem from './dialogUpdateItem';\r\nimport AlertBar from './alertBar';\r\nimport LoadingBar from './loadingBar';\r\nimport { loadEmployees } from '../services/employeesItems';\r\nimport { useItems } from '../services/itemsContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dataGrids: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.background.default,\r\n    }\r\n}));\r\n\r\n\r\n\r\nconst DataGridDemo = (props: propsDataGrid) => {\r\n    const classes = useStyles();\r\n\r\n    const [openDialogAdd, setOpenDialogAdd] = useState<boolean>(false);\r\n    const [openDialogUpdate, setOpenDialogUpdate] = useState<boolean>(false);\r\n    const [selected, setSelected] = useState<any>({});\r\n    const [openAlert, setOpenAlert] = useState<boolean>(false);\r\n    const { loading, setEmployeesList, setLoading } = useItems();\r\n\r\n\r\n    const columns = (): ColDef[] => {\r\n        const schemaColumns: ColDef[] = [\r\n            { field: 'id', headerName: 'ID', width: 100 },\r\n            { field: 'name', headerName: 'Nome do Funcionário', width: 280 },\r\n            { field: 'bornDate', headerName: 'Data de Nascimento', width: 180 },\r\n            { field: 'salary', headerName: 'Salário', type: 'number', width: 90 },\r\n            { field: 'position', headerName: 'Cargo', width: 200 },\r\n            {\r\n                field: 'actions', headerName: 'Acões', width: 180, renderCell: (params: ValueFormatterParams) => {\r\n                    return (<div><ButtonUpdateItem onClickFunction={() => clickUpdateItem(params)} />\r\n                        <ButtonDelete onClickFunction={() => clickRemoveItem(params)} /></div>)\r\n                }\r\n            },\r\n        ];\r\n        return schemaColumns;\r\n    }\r\n\r\n\r\n    const dataGridView = useMemo(() => (\r\n        <DataGrid\r\n            className={classes.dataGrids}\r\n            rows={props.rows}\r\n            columns={columns()}\r\n            pageSize={7}\r\n            components={{\r\n                loadingOverlay: LoadingBar,\r\n            }}\r\n            loading={loading}\r\n        />\r\n    ), [props.rows, classes.dataGrids, loading])\r\n\r\n    const clickRemoveItem = (params: ValueFormatterParams) => {\r\n        deleteItem(params.row.id)\r\n            .then(response => {\r\n                loadEmployees({ setEmployeesList, setLoading });\r\n                setOpenAlert(true);\r\n            })\r\n    }\r\n\r\n    const clickUpdateItem = (params: ValueFormatterParams) => {\r\n        setSelected(params.row);\r\n        setOpenDialogUpdate(true);\r\n    }\r\n\r\n    const onClickHandle = () => setOpenDialogAdd(true);\r\n\r\n    const AlertBarInfo = useMemo(() => (\r\n        <AlertBar open={openAlert} state={setOpenAlert} time={5000} type={alertTypes.error} >Funcionario removido com Sucesso!</AlertBar>\r\n    ), [openAlert])\r\n\r\n    return (\r\n        <>\r\n            {AlertBarInfo}\r\n            <DialogAddItem open={openDialogAdd} state={setOpenDialogAdd} />\r\n            <DialogUpdateItem data={selected} open={openDialogUpdate} state={setOpenDialogUpdate} />\r\n            <Container component=\"main\">\r\n                <div style={{ height: 500, width: '100%' }}>\r\n                    {dataGridView}\r\n                </div>\r\n                <ButtonsActions onClickFunction={onClickHandle} />\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default DataGridDemo;\r\n\r\n","D:\\developer\\seven\\frontend\\src\\config\\types.ts",[],"D:\\developer\\seven\\frontend\\src\\components\\menuBar.tsx",[],"D:\\developer\\seven\\frontend\\src\\config\\envVars.ts",[],"D:\\developer\\seven\\frontend\\src\\components\\dialogAddItem.tsx",[],"D:\\developer\\seven\\frontend\\src\\components\\dialogUpdateItem.tsx",["59"],"D:\\developer\\seven\\frontend\\src\\services\\employeesItems.ts",[],"D:\\developer\\seven\\frontend\\src\\services\\itemsContext.tsx",[],"D:\\developer\\seven\\frontend\\src\\views\\main.tsx",[],"D:\\developer\\seven\\frontend\\src\\components\\alertBar.tsx",[],"D:\\developer\\seven\\frontend\\src\\components\\buttonDeleteItem.tsx",[],"D:\\developer\\seven\\frontend\\src\\services\\authContext.tsx",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":67,"column":8,"nodeType":"66","endLine":67,"endColumn":48,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":32,"column":7,"nodeType":"70","messageId":"71","endLine":32,"endColumn":14},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'columns'. Either include it or remove the dependency array.","ArrayExpression",["74"],"@typescript-eslint/no-unused-vars","'getDate' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [classes.dataGrids, props.rows, columns, loading]",{"range":"77","text":"78"},[2617,2657],"[classes.dataGrids, props.rows, columns, loading]"]